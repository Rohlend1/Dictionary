version: "3.8"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile-backend
    ports:
      - "8080:8080"
      - "8081:8081"
    networks:
      - spring-network
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile-frontend
    ports:
      - "3001:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=false
      - WDS_SOCKET_PORT=3000
    volumes:
      - ./frontend:/app
    networks:
      - spring-network
  postgres:
    image: postgres:15-alpine
    volumes:
      - ./postgres/:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_DB=dictionary_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5433:5432"
    networks:
      - monitoring
      - spring-network
  mongo:
    image: mongo
    volumes:
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      - MONGO_INITDB_ROOT_PASSWORD=mongo
      - MONGO_INITDB_ROOT_USERNAME=mongo
      - MONGO_INITDB_DATABASE=dictionary
    ports:
      - "27017:27017"
    networks:
      - spring-network
  elasticsearch:
    image: elasticsearch:7.17.20
    environment:
      - cluster.name=dictionary-fts-cluster
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=elastic
      - "ES_JAVA_OPTS=-Xmx1g -Xms1g"
    ports:
      - "9200:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: curl -s http://localhost:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
  kibana:
    image: kibana:7.17.20
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=elastic
    ports:
      - '5601:5601'
  redis:
    image: redis:7
    restart: always
    command: /bin/sh -c "redis-server --save 60 1 --requirepass $$REDIS_HOST_PASSWORD"
    env_file:
      - redis.env
    ports:
      - "6379:6379"
    networks:
      - spring-network
  grafana:
    build: './backend/config/grafana'
    ports:
      - 3000:3000
    volumes:
      - ./backend/config/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      monitoring:
        aliases:
          - grafana
  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./backend/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus:/prometheus
    networks:
      monitoring:
        aliases:
          - prometheus
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:v0.13.1
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgres://postgres:postgres@postgres:5432/dictionary_db?sslmode=disable
    networks:
      - spring-network
      - monitoring

networks:
  spring-network:
    driver: bridge
  monitoring:
