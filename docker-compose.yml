version: "3.8"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile-backend
    ports:
      - "8080:8080"
    environment:
      CHOKIDAR_USEPOLLING: "true"
    networks:
      - spring-network
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile-frontend
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=false
      - WDS_SOCKET_PORT=3000
    volumes:
      - ./frontend:/app
    networks:
      - spring-network
  postgres:
    image: postgres:15-alpine
    volumes:
      - ./postgres/:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_DB=dictionary_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5433:5432"
    command: ["postgres", "-c", "shared_preload_libraries=pg_stat_statements"]
    networks:
      - spring-network
  redis:
    image: redis:7
    restart: always
    command: /bin/sh -c "redis-server --save 60 1 --requirepass $$REDIS_HOST_PASSWORD"
    env_file:
      - redis.env
    ports:
      - "6379:6379"
    networks:
      - spring-network
  grafana:
    build: './backend/config/grafana'
    ports:
      - 3000:3000
    volumes:
      - ./backend/config/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      monitoring:
        aliases:
          - grafana
  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./backend/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus:/prometheus
    networks:
      monitoring:
        aliases:
          - prometheus
networks:
  spring-network:
    driver: bridge
  monitoring:
